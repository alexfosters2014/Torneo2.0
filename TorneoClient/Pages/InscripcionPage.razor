@page "/inscripcion"

@inject DataServiceInscripcion dataServiceInscripcion;
@inject DataServiceEquipo dataServiceEquipo;
@inject IToastService toast;


<div class="tarjetaEquipoContainer">
    
    <table>
        <tr>
            <td>Selecciona tu equipo</td>
            <td><input type="text" value="@equipo.NombreEquipo"/></td>
            <td><button @onclick="ShowBuscadorEquipo">Buscar</button></td>
        </tr>

        <tr class="alturaEspecificaEquipo_tr"></tr>
        <tr>
            <td>Selecciona el torneo</td>
            <td colspan="3"></td>
        </tr>
        @foreach (var item in torneos)
        {
            <td colspan="2" style="width:10vw">
                    <select @onchange="CambioTorneo">
                               <option value="0" selected>Seleccionar un torneo</option>
                            @foreach (string key in Diccionarios.TipoTorneo.Keys)
                            {
                               <option value="@key">@key</option>
                            }
                    </select>
            </td>
        }

    </table>

</div>

<div class="flexCenterBox">
    <button class="buttonStyle" @onclick="Inscribir">Inscribir mi equipo</button>

</div>


@code {

    [CascadingParameter] IModalService Modal { get; set; } = default!;

    List<Torneo> torneos = new();
    Torneo torneo = new();
    Equipo equipo =new();


    private async Task ShowBuscadorEquipo()
    {

        var buscadorEquipoModal = Modal.Show<BuscadorEquipoInscripcion>();

        var result = await buscadorEquipoModal.Result;

        if (result.Confirmed)
        {
            equipo = (Equipo)result.Data;
            torneo = new();
            await ActualizarListaTorneos(equipo.Deporte);
        }
    }

    private async Task ActualizarListaTorneos(string deporte)
    {
        torneos = await dataServiceInscripcion.GetTorneosSegunDeporte(deporte);
        StateHasChanged();
    }

    void CambioTorneo(ChangeEventArgs e)
    {
        int torneoSeleccionadoId = Int32.Parse(e.Value.ToString());

        torneo = torneos.SingleOrDefault(s => s.Id == torneoSeleccionadoId);
        torneo.Inscripciones.Clear();
        torneo.Inscripciones.Add(equipo);
    }

    private async Task Inscribir()
    {
        try
        {
            if (torneo.Id > 0 && torneo.Inscripciones.Count > 0)
            {
                var resultado = await dataServiceInscripcion.NuevaInscripcionATorneo(torneo);
            }
            else
            {
                toast.ShowInfo("Falta Seleccionar algunos items");
            }
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

}

